generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @unique @default(cuid()) // Use UUID or other strategy for primary key
  password         String
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now())
  media            Media[]
  messages         Message[]
  Group            Groups[]
  GroupMembers     GroupMembers[]
  GroupMessages    GroupMessages[]
  sentMessages     Message[]       @relation("SentMessages")
  receivedMessages Message[]       @relation("ReceivedMessages")
}

model Message {
  id             String @id @unique @default(cuid())
  messageContent String
  contentType    String @default("text")

  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  createdAt  DateTime @default(now())
  status     String   @default("sent")
  media      Media[]
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Groups {
  id            String          @id @unique @default(cuid())
  name          String
  description   String
  admin         User            @relation(fields: [adminUserId], references: [id])
  adminUserId   String
  isActive      Boolean
  createdAt     DateTime        @default(now())
  GroupMembers  GroupMembers[]
  GroupMessages GroupMessages[]
  Media         Media[]
}

model GroupMembers {
  group    Groups   @relation(fields: [groupId], references: [id])
  groupId  String
  member   User     @relation(fields: [memberId], references: [id])
  memberId String   @default("member")
  joinedAt DateTime @default(now())
  isActive Boolean
  role     String

  @@id([groupId, memberId])
}

model GroupMessages {
  id          String   @id @unique @default(cuid())
  group       Groups   @relation(fields: [groupId], references: [id])
  groupId     String
  content     String
  sender      User     @relation(fields: [senderId], references: [id])
  senderId    String
  contentType String   @default("text")
  status      String   @default("sent")
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)
  messageType String   @default("user")
  Media       Media[]
}

model Media {
  id       String @id @unique @default(cuid())
  fileName String
  fileSize Int
  mimeType String
  url      String

  user            User    @relation(fields: [userId], references: [id])
  userId          String
  personalMessage Message @relation(fields: [dmMessageId], references: [id])
  dmMessageId     String

  group          Groups?        @relation(fields: [groupId], references: [id])
  groupId        String?
  message        GroupMessages? @relation(fields: [groupMessageId], references: [id])
  groupMessageId String?
  contentType    String
  createdAt      DateTime       @default(now())
}
